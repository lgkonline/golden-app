{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","active","setActive","navItems","icon","react_default","a","createElement","xmlns","width","height","viewBox","fill","d","iconActive","label","className","style","map","navItem","index","key","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAmDeA,MAjDf,WAAe,IAAAC,EACiBC,mBAAS,GAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACJK,EADIH,EAAA,GACII,EADJJ,EAAA,GAGLK,EAAW,CACb,CACIC,KAAMC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOC,EAAE,oBAAoBR,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,uOAC7JC,WAAYT,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOC,EAAE,2CAA2CR,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,oMAC1LE,MAAO,SAEX,CACIX,KAAMC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOC,EAAE,oBAAoBR,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,4LAC7JC,WAAYT,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,sJAAsJR,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOC,EAAE,qBACrSE,MAAO,aAEX,CACIX,KAAMC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOC,EAAE,oBAAoBR,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,kTAC7JC,WAAYT,EAAAC,EAAAC,cAAA,OAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAYN,EAAAC,EAAAC,cAAA,QAAMK,KAAK,eAAeC,EAAE,sUAAsUR,EAAAC,EAAAC,cAAA,QAAMM,EAAE,gBAAgBD,KAAK,UAC9dG,MAAO,SAIf,OACIV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,uBACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kCAAkCC,MAAO,CAAEP,OAAQ,UAC9DL,EAAAC,EAAAC,cAAA,OAAKS,UAAU,4CACVb,EAASe,IAAI,SAACC,EAASC,GAAV,OACVf,EAAAC,EAAAC,cAAA,KACIc,IAAKD,EACLJ,UAAW,4DAA8Df,GAAUmB,EAAQ,UAAY,IACvGE,KAAK,qBACLC,QAAS,kBAAMrB,EAAUkB,KAExBnB,GAAUmB,EAAQD,EAAQL,WAAaK,EAAQf,KANpD,IAM0DC,EAAAC,EAAAC,cAAA,QAAMS,UAAU,0BAA0BG,EAAQJ,YAMxHV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,4BACXX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,uBAAd,eAEAX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mBAAmBC,MAAO,CAAEP,OAAQ,eChCnDc,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.77b69fac.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n    const [active, setActive] = useState(0);\n\n    const navItems = [\n        {\n            icon: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path fill=\"currentColor\" d=\"M20 7h-4V5l-2-2h-4L8 5v2H4c-1.1 0-2 .9-2 2v5c0 .75.4 1.38 1 1.73V19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-3.28c.59-.35 1-.99 1-1.72V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zM4 9h16v5h-5v-3H9v3H4V9zm9 6h-2v-2h2v2zm6 4H5v-3h4v1h6v-1h4v3z\" /></svg>,\n            iconActive: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0zm10 5h4v2h-4zm0 0h4v2h-4z\" /><path fill=\"currentColor\" d=\"M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1h-4zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm-6 0h-4V5h4v2z\" /></svg>,\n            label: \"Cases\"\n        },\n        {\n            icon: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path fill=\"currentColor\" d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5v-3h3.56c.69 1.19 1.97 2 3.45 2s2.75-.81 3.45-2H19v3zm0-5h-4.99c0 1.1-.9 2-2 2s-2-.9-2-2H5V5h14v9z\" /></svg>,\n            iconActive: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z\" /><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /></svg>,\n            label: \"Inventory\"\n        },\n        {\n            icon: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path fill=\"currentColor\" d=\"M15.55 13c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.37-.66-.11-1.48-.87-1.48H5.21l-.94-2H1v2h2l3.6 7.59-1.35 2.44C4.52 15.37 5.48 17 7 17h12v-2H7l1.1-2h7.45zM6.16 6h12.15l-2.76 5H8.53L6.16 6zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\" /></svg>,\n            iconActive: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\" /><path d=\"M0 0h24v24H0z\" fill=\"none\" /></svg>,\n            label: \"Shop\"\n        }\n    ];\n\n    return (\n        <div className=\"App container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-3 col-sm-2 col-md-3 bg-dark\" style={{ height: \"100vh\" }}>\n                    <nav className=\"App-nav offset-lg-3 nav flex-column mt-3\">\n                        {navItems.map((navItem, index) =>\n                            <a\n                                key={index}\n                                className={\"nav-link justify-content-center justify-content-md-start\" + (active == index ? \" active\" : \"\")}\n                                href=\"javascript:void(0)\"\n                                onClick={() => setActive(index)}\n                            >\n                                {active == index ? navItem.iconActive : navItem.icon} <span className=\"ml-2 d-none d-md-block\">{navItem.label}</span>\n                            </a>\n                        )}\n                    </nav>\n                </div>\n\n                <div className=\"col-9 col-sm-10 col-md-8\">\n                    <h1 className=\"display-4 mt-4 mb-3\">Awesome app</h1>\n\n                    <div className=\"bg-primary w-100\" style={{ height: \"300px\" }} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}